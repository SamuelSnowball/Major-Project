//////////////////////////////////////////////////////////////////////////////////////////
####################### MARS MISSON CONTROL GAME - PRODUCT BACKLOG #######################
//////////////////////////////////////////////////////////////////////////////////////////

Things left to add to the project: (Estimation time in hours, 10 priority is highest)

	Core features:
		Loading and saving functions (ongoing) 		(time: 03h) (priority: 9)
		Add in rocks (ongoing)				(time: 10h) (priority: 8)
		Create missions for user 			(time: 10h) (priority: 8)
		Add shop					(time: 15h) (priority: 8)
		Build terrain (ongoing) 			(time: 10h) (priority: 6)
		Collision with rocks (ongoing) 			(time: 03h) (priority: 6)
		Build GUIs 					(time: 10h) (priority: 6)
		Prospecting, shows progress bar + particles 	(time: 08h) (priority: 5)
		Add audio (ongoing) 				(time: 03h) (priority: 4)
		Add ability to harvest and deposit gas		(time: 08h) (priority: 4)
		Add player inventory 				(time: 08h) (priority: 4)
		Minimap (Added to bottom GUI)			(time: 10h) (priority: 3)

	Extra features:
		Sandstorms					(time: 08h) (priority: 3)
		Meteor showers					(time: 08h) (priority: 3)
		Dropping supply crates				(time: 05h) (priority: 3)
		Particle effects 				(time: 08h) (priority: 3)
		Shadows 					(time: 10h) (priority: 2)
		Initial loading scene 				(time: 03h) (priority: 2)
			Great obj for loading scene:
			http://tf3dm.com/3d-model/mission-control-26199.html
			Could also have rocket flying through space
		Day/night cycles				(time: 05h) (priority: 1)
		Extra texture effects, bump mapping etc		(time: 10h) (priority: 1)
		Rotating rock appears in GUI			(time: 05h) (priority: 1)
		Set different colours for ambient, specular     (time: 02h) (priority: 1)

	Documentation to write:
		User manual, features, how to play
		Overall design	
		Technical stuff
		Class diagram
		Test table

	Current features:
		3D Scene + movement/rotation mechanics		(time: 30h) (priority: 10)
		Terrain 					(time: 30h) (priority: 10)
		Some rocks, with collision			(time: 08h) (priority: 8)
		Collision with terrain (ongoing) 		(time: 08h) (priority: 6)
		Texturing terrain 				(time: 05h) (priority: 5)
		Water, with specular lighting			(time: 12h) (priority: 4)
		Fog						(time: 06h) (priority: 4)
		
	Small things to do:
		Fix github issues
		Change STATIC_DRAW renders to DYNAMIC_DRAW


For mid project release aiming for all core done

Before demo/final release:
	Change movement speed
	Change camera rotation speed
	Disable use of W and S keys
	Shorten minimap zFar range
	
Add a release version after each sprint as well

/////////////////////////////////////////////////////////////////////
####################### BEFORE STARTING SCRUM #######################
/////////////////////////////////////////////////////////////////////

1st - 7th February

	Added:
		Boilerplate code including:
		Basic vertex and fragment shaders
		index.html file
	
		Model view projection matrices
		Rendered a square with some depth to make sure matrices working	

		Grid of vertices with double for loop
		1D heightmap of vertices
		Assigned heightmap values to vertex heights

	Found new m4.js matrix library, rather than MDN library


7th February

	Added:
		Github project
		Screenshots folder, bug log, changelog


8th February

	Added:
		Player can now look up and down as well as left and right	

	Fixed:
		Terrain now renders at its position, rather than at players position
		Camera rotation now goes 360 degrees
		Rover can no longer go left/right, didnt make sense for it to


9th February
	
	Added:
		Expanded terrain to 256 rows 256 columns
		Clearing of depth buffer, terrain now renders properly	
		Seperate code into collision.js and movement.js	

	Fixed:		
		Player now moves backwards properly	
		Player movement speed can now be changed	

	Researched:
		OpenGL lighting
		Geometry buffer, useful for particle effects (perhaps drilling rocks)
		It's also useful for calculating normals for lighting

	3D Movement mechanics are now working properly.


10th February
		
	Added:
		Hill/Crater terrain generation, not finished yet
		Some screenshots showing progress
	
	Fixed: 
		Turned 1D heightMap into 2D heightMap for easier indexing


11th February

	Added:
		Split screenshots folder to have sub folders

		Deeper hill and crater generation	
		Split up terrain code, creation, buffers, rendering etc
		Added createHill and createCrater functions, that call the other getSurroundingElements
		More comments to terrain code
		Added some random terrain cliffs, temporary, very easy to add

		I thought my perlin noise terrain generation was strange, so decided to have
		another look at it.
		Discovered I was being stupid and not using perlin noise correctly
		Looked at how I did it from a previous scratch pad and fixed it
		But original method is useful for flat bumpy areas
		Now gives nice rolling hills

		terrain1 shows rolling hills with a crater, nice	

	Researched:
		OpenGL texture mapping


12th February

	Added:
		Image resources, so now have to run on local server
			Symlinked files on my desktop

		Mapped texture over terrain, will eventually make my own in future
			Load the texture, updated shaders

		Started to build sphere geometry, for boulders

	Fixed:
		Solved maximum terrain size bug, can now generate more terrain than ever needed

	Researched:
		Creating sphere geometries



///////////////////////////////////////////////////////////////////////
####################### SCRUM AND SPRINTS BEGIN #######################
///////////////////////////////////////////////////////////////////////


Sprint 0 (13th - 20th February)

	Tackling tasks from product backlog:
		Loading and saving functions (ongoing) 		(time: 03h) (priority: 9)
		Add in rocks (ongoing)				(time: 10h) (priority: 8)
		Create missions for user 			(time: 10h) (priority: 8)
		Build terrain (ongoing) 			(time: 10h) (priority: 6)
		Collision with terrain (ongoing) 		(time: 05h) (priority: 6)			
		Redesign file structures		

		Total estimated hours = 39

	Sprint plan:
		Loading and saving
			HTML5 local storage
			Saving player position, eventually level, XP

		Add in rocks 
			Low poly instanced rendered rocks for non interaction
			Then spheres for interacting with
			Use exising sphere geometry, randomly shift vertices
			Then place them into the world
		
			Added in triangle rocks
			Could spawn them random distance away from the bigger pyramid
			Also have different textures
		
		Create missions for user
			Would involve creating very basic GUI first, see-through,
			Go and explore this section of the map
			Go collect this rock
			Collect X of this rock, to then unlock this rock	
			Print text on screen character by character (left gui?)
				-have a initial sound to incate new mission

			Randomly generate them a mission, depending on their lvl? every few minutes
			-Else, just go explore and mine rocks
			-IF gameTime over 5000, give first mission

		Collision with rocks
			If they're colliding with rock + key held down
				-Show mining progress bar
				-Show particle effects
				-When 100% remove rock, or set its texture to something, depleted
				-Add something to their top left level bar

			They can shoot laser, draw in view direction from infront of them
			If that collides with rock,
			Cap max laser range	

				Particles - make object with constructor! (could have LAVA in craters!)
				Bunch of gl points, move them, if out of bounds reset them
				Define 100 points, put in buffer, 1 draw call?
				Apply some position to them in v shader?

		Build terrain
			Add different levels of perlin noise
			Add in craters

		Collision with terrain
			Add in 2D heightmap rather than 1D array in collision file
			Pop up on GUI, too close to rock etc

	Sprint retrospective:

		Tasks worked on:

			(Broken) Loading and saving functions intial setup (2 hours)
				When loading the players position, when they move, it breaks
				Right now I don't have much information to store, but the code is there

			Added rocks (8 hours)
				Added triangle rocks
				Sphere geometries (NOT MINE)
					USED CODE FROM: https://github.com/mrdoob/three.js/blob/master/src/geometries/SphereGeometry.js
					The used code is in the createRock function of the rock.js file
					Didn't want to try write sphere geometry code from scratch
					But also didn't want to import OBJ of sphere, as would be hard to change vertices
					Most sphere geometeries where completely not connected the back,
					So took ages to find a good sphere

			Added collision with rocks (6 hours)
				
			Added prospecting rocks (30 mins)
				Currently just changes rocks texture to depleted, eventually will gain XP or something

			Redesiging files, now much more object orientated, less globals, private functions (10 hours)
			Added particles (2 hours)
			Added water (2 hours)
			Added inital background screen and GUIs (4 hours)

		Problems:
			Positioning little elements and css'ing them took hours
			Rock collision, annoying to test, had to show triangles at collision boundaries to check
			WHY ARE THERE SO MANY VERTICES FOR THREE.JS SPHERE?
			What happens if the rocks spawn on the player, they're stuck

		Improvements:
			GLdrawElementsInstaced, only needed as performance optimization, not needed right now
			Perhaps save rock positions, or keep them random
			Change water vertices on GPU
			Cut down sphere vertices some how

		Total hours: 46
			30 hours coding
			10 hours more on design how I'm going to do things etc, comments, debugging, updating this logs
			6 hours researching on stackoverflow & youtube 

			

Sprint 1 (20th - 27th February)
	Tackling tasks from product backlog:
		Add in rocks (ongoing)				(time: 05h) (priority: 8) (actual time: 04h)
		Create missions for user 			(time: 05h) (priority: 8) (actual time: 04h)
		Build terrain (ongoing) 			(time: 05h) (priority: 6) (actual time: 05h)
		Build GUIs 					(time: 04h) (priority: 6) (actual time: 05h)
		Texturing terrain 				(time: 05h) (priority: 5) (actual time: 08h)
		Add audio 					(time: 03h) (priority: 4) (actual time: 01h)
		Add in lighting 				(time: 10h) (priority: 4) (actual time: 10h)

	Extra features:
		Fog						(time: 06h) (priority: 4) (actual time: 0.5h)

	Other features:
		Paper UI designs
		Lighting notes
		Started class diagram

		Add fog		

	Sprint plan:
		Create own textures from heightMaps
		Go and find this rock around these coordinates,
			Show image of rock
		Work from existing GUI screenshot
		Dont let user access certain rocks unless high enough level
		Prospecting progress bar
		Geometry shader for lighting, calculating normals
		Add dangerous areas
		Death mechanics, reset all XP and restart, fade out everything, you died
		Add new textures for new rocks
		Water/lava causing death on collision
		Particle effects over lava
		Perhaps 3 more sections of terrain, 4 big big quadrants
		Leveling mechanics, XP bar
			-prospect rock = XP
			-Access new areas based on XP
		Add types of rock
			-types of triangle rock
			-types of regular rock
	
		Add screenshots
		Split myJs files into folders
		Redesign some files,  rename
		Put CSS in another file		
		Remove enableVertexAttribute = calls, its now all done in glSetup
		Enable and disable attributes when rendering, dont enable all global at start

	Sprint retrospective:
		Remove unused jQuery libraries
		Moved buglog into github issues
		Added references file

		Improved water, each vertex now has its own direciton
			Rather than every row having a direction
			Weird spawn makes it look nice when reaches correct height

		Added own perlin noise texture
		Then exported it to image + changed colours, then imported as texture

		Distoriton when rotation a bit better, lowered field of view to 0.3

		Paper UI designs
		Added little txt file as well
		
		Added directional lighting
		Fixed bug with rotating objects
		Added diffuse lighting
		Added specular lighting, avaliable on textures

		Have given 0.5 ambient in shader

		Added proper texture class
		
		Calculated terrain normals + water normals
		Inversed my terrain and water normals, they now point right direction
		My light direction, is going the same way as the normals.... ??
		Yes, because its surfaceToLightVector, so it makes sense that they go same way!
		I think I substracted the vectors the wrong way around

		Inversed X and Z values in get terrain heightMap getters, it now works
		Terrain collision code is now perfect

		Added gaining xp when prospecting a rock	
		
		Added some map design pic + notes	

		Built simple audio class

		Added fog

		Made bunch of perlin textures

		Notes:
			FIX ROTATION NAMES IN RENDER, THEY'RE DIFFERENT FROM
			THOSE GLOBAL NAMES IN MATRICES, xRotation VS rotateX!

			MAKE SURE NORMALS GET BOUND WHEN RENDERING

			Take screenshots of lighting when fixed

			Lighting diagrams + find good references
	
			Whats with the light direction, being the same as the reversedDirection?
			Ok, I think specular is working, because when on the flat section
			of the terrain, there are no highlights whatsoever, because the normals
			are pointing straight up

			Player spawn in middle of 4x4 grid, dangerous areas towards outside
			Different quadrants have different rocks, etc

			4x4 grid minimap!!! shows current quadrant, should be relativley easy
				locked sections, avaliable sections

			Why cant i see specular highlights on water?
				-Its shimmering, because light coming from 1 direction


		
Sprint 2 (27th Feb - 6th March)

	Tackling tasks from product backlog:
		Loading and saving functions (ongoing) 		(time: 03h) (priority: 9) (actual time: 03h)
		FINISH building terrain (ongoing) 		(time: 05h) (priority: 6) (actual time: 10h)
		Build GUIs (Minimap + nearest rock)		(time: 02h) (priority: 6) (actual time: 01h)
		Minimap 					(time: 02h) (priority: 5) (actual time: 06h)

	Other tasks:
		Start test table
		
	Sprint plan:
		Bad minimap 
			4x4 grid minimap, shows current quadrant, 
			should be relativley easy
			locked sections in red, avaliable sections in blue, current in green

		Proper minimap/map
			render the scene from above, in a small portion to the side of window
			Could have really bad efficieny though
			Drawing everything again :/

			Possible solution, only render the minimap/map when the user
			holds down a key, pops up in another interface!
			Users current position gets upped by like +20y
			Then player view gets rotated straight down?
			Set gl.lookAt perhaps
			
		Load and saving
			Player position
			Current XP/Level

		Spawn user in the correct grid square

		Set noise values of 16 quadrants

		Texture all 16 quadrants
			Work on inner 4 squares first
			Have all 16 texturs on 1 atlas, so easy to use!
			Start with mid 4 images
			Move perlin scales in
			Set player spawn

		Add audio
			ambient soundtrack
			when colliding with rocks
			when prospect a rock

		Possibily work on water on GPU and spawning it randomly

		Need a bunch of rocks
		-With names
		-Then have missions telling user to explore the rocks

		If user in range of water vertices, then start updating them, else dont
		
		
	Sprint retrospective:
		MIT Licensing, I've included MIT code, which means I need the license
		But ive changed bits...
		Used MIT licensed library

		Remember to add proper licenses, various MIT from three.js and obj loader
		In licenses file as well

		Rock rendering efficency is bad, seperate draw call for each

		Could have one draw call of small rocks, once terrain + rock rendering efficiency/clipping fixed

		Added Minimap/birds eye view when ser holds M key
			Disables fog, widens zFar when in miniMap mode
			Otherwise, because so far away, everything would be in fog!

			In minimap mode need to widen the zFar plane so player can see alot of the map
			But then decrease back to normal, for rendering efficiney
			The user cant see past 64z anyway due to fog, why render 512z?
			Remade projectionMatrix every frame to set the zFar value

			Added player position onto minimap, just a red square

			Once finished minimap, implement into game, but need to fix rendering issues first
			because will be rendering scene twice

		Changed players x,y,z to private fixed scoping issues
		Removed triangle rocks, they didnt have indices and required different render function	
		Fixed saving player position
		Added rock objs with some textures, lighting is broken with them

		Added flow diagram
		Bit more on class diagram

		I don't commit enough! Do it more!

	Notes:
		Trying to write my own obj loader, waste of time
		Not sure about MIT license, with obj loader and three.js sphere code
		Found terrain rendering was horrible, processes all vertices, discards 95% of them



Sprint 3 (6th - 13th March)

	Tackling tasks from product backlog:

	Other tasks:
		Fix terrain and rock rendering efficiency
		Restructure files
			Add comments
		Change STATIC_DRAW renders to DYNAMIC_DRAW
		Commit more often

	Sprint plan:
		Rock collision (requires terrain rendering fixed)
			If use loads of terrain sections
			Then have rocks in a specific section
			And only test collision for those rocks in that section (not 3x3)
				But be careful of spawning rock on a boundary 

		Some sort of danger mechanic
			
			Warn player of sandstorm, have to get out of area
			Perhaps falling asteroid showers

		Could have a station/building/lander where you have to go:
			refuel, give user fuel bar, goes down when moving
				gui to tell them to go refuel
			deposit ore -> cargo bay full
			fix rover etc
			upgrade rover, faster movespeed etc, fuel tank, rover armour? vs rock
			more powerful drill, can mine new rocks

			When in range of shop, show GUI, press P to open shop

		Gain experience, which is used to unlock new upgrades

		Have some crates (cubes) inside the model, with mapped texture
			DEPOSIT ROCKS
			REFUEL
		
		Special crates could be dropped 'from earth'
		Or asteroid, with bonus xp or something

		Add nearest rock to GUI
		Add effects to GUI when update

		Terrain rendering plan

			Temporary Goal: 
				Process and render the vertices, of the current quadrant the player is in

			Setup:
				Have an array of all VAOs
				Create 16 terrain VAOs, each containing:
					A quadrants vertices, normals, uvs, indices
					Try each quadrant as 128x128 vertices, then possibily 256x256 vertices
			Render:
				Get player position
				Find the quadrant they're in, and get the matching VAO
				Bind and render the data in that VAO

			Actual goal: 
				Split entire map into LOTS of VAOs
				Find current player position, and get matching VAO, and surrouding 8 VAOs (quadrants basically)
				Have to have surrounding vertices as well, so player can see into distance

	Sprint retrospective:
		Stacked noise for terrain generation!
		Added screenshot of regular vs stacked noise

		Fixed weird black lines on terrain, was due to specular parameters,
		but was confused, as I said terrain had 0 reflectivity, and somehow
		giving 10 shineDamper seemed to make it work

		Got Terrain VAO working!

		Fixed terrain rendering issues!
			Added screenshots showing testing

		Added better rock rendering efficiency
		Calculate vector from player to rock, if over some amount
			then the vertices dont get rendered (more importantly dont get processed)

		objRock collision

		Added sector 1, 4x4 squares in middle
			requires > 5 xp to progress

		Rock spawning in certain quadrants

		Added utility class

		Removed horrible sphere code rocks

		Cleaned up texture loader

	Notes:
		Need to stop wasting time with HTML divs for guis



Sprint 4 (13th - 20th March)


