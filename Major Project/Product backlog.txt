/////////////////////////////////////////////////////////////////////////////////////
####################### Mars Scene in WebGL - PRODUCT BACKLOG #######################
/////////////////////////////////////////////////////////////////////////////////////

Things left to add to the project: (Estimation time in hours, 10 priority is highest)

	Features left to implement:
		
	Extra features:

		Small 'sandstorms'/ dust devils			(time: 10h) (priority: 4)
			Only on sand regions
			If player in range

		Scene home screen 				(time: 04h) (priority: 3)

		Scene loading bar				(time: 01h) (priority: 3)

		Gas coming from craters, use OBJs for craters?	(time: 10h) (priority: 5)
			Just simple particles
			Doing this before meteors, because the gas particle effects 
			will be needed for the meteros.

		Meteor showers					(time: 08h) (priority: 6)
			Some smoke particle effect on collision + rock stays
			Rock rotates coming down, particles behind it
			Could have a toggle for meteor shower

		Popup GUI showing current info of feature 	(time: 10h) (priority: 2)
			Transparent background, gas, rock

		Extra texture effects, bump mapping etc		(time: 40h) (priority: 1)

	Current features: (features and hours are not up to date..)
		3D Scene + movement/rotation mechanics		(time: 30h) (priority: 10)
		Terrain + rendering efficiency			(time: 30h) (priority: 10)
		Rocks, instance rendered (objs)			(time: 20h) (priority: 8)
		Skybox						(time: 10h) (priority: 7)
		Water						(time: 45h) (priority: 6)
		Texturing terrain 				(time: 10h) (priority: 5)
		Fog						(time: 06h) (priority: 4)
		Day/night cycles				(time: 05h) (priority: 1)
		Add user interaction, 				(time: 06h) (priority: 5)
		Map boundaries + current position		(time: 05h) (priority: 5)
		Add ambient audio, water audio near water	(time: 01h) (priority: 1)


Terrain notes:
	Not using existing mars heightmap
		-literally loading in an obj

Rendering efficiency
	currently processing vertices that are behind the player
	Fixing this could mean 50% more vertices allowed
	
Add a release version after each sprint as well

/////////////////////////////////////////////////////////////////////
####################### BEFORE STARTING SCRUM #######################
/////////////////////////////////////////////////////////////////////

1st - 7th February

	Added:
		Boilerplate code including:
		Basic vertex and fragment shaders
		index.html file
	
		Model view projection matrices
		Rendered a square with some depth to make sure matrices working	

		Grid of vertices with double for loop
		1D heightmap of vertices
		Assigned heightmap values to vertex heights

	Found new m4.js matrix library, rather than MDN library


7th February

	Added:
		Github project
		Screenshots folder, bug log, changelog


8th February

	Added:
		Player can now look up and down as well as left and right	

	Fixed:
		Terrain now renders at its position, rather than at players position
		Camera rotation now goes 360 degrees
		Rover can no longer go left/right, didnt make sense for it to


9th February
	
	Added:
		Expanded terrain to 256 rows 256 columns
		Clearing of depth buffer, terrain now renders properly	
		Seperate code into collision.js and movement.js	

	Fixed:		
		Player now moves backwards properly	
		Player movement speed can now be changed	

	Researched:
		OpenGL lighting
		Geometry buffer, useful for particle effects (perhaps drilling rocks)
		It's also useful for calculating normals for lighting

	3D Movement mechanics are now working properly.


10th February
		
	Added:
		Hill/Crater terrain generation, not finished yet
		Some screenshots showing progress
	
	Fixed: 
		Turned 1D heightMap into 2D heightMap for easier indexing


11th February

	Added:
		Split screenshots folder to have sub folders

		Deeper hill and crater generation	
		Split up terrain code, creation, buffers, rendering etc
		Added createHill and createCrater functions, that call the other getSurroundingElements
		More comments to terrain code
		Added some random terrain cliffs, temporary, very easy to add

		I thought my perlin noise terrain generation was strange, so decided to have
		another look at it.
		Discovered I was being stupid and not using perlin noise correctly
		Looked at how I did it from a previous scratch pad and fixed it
		But original method is useful for flat bumpy areas
		Now gives nice rolling hills

		terrain1 shows rolling hills with a crater, nice	

	Researched:
		OpenGL texture mapping


12th February

	Added:
		Image resources, so now have to run on local server
			Symlinked files on my desktop

		Mapped texture over terrain, will eventually make my own in future
			Load the texture, updated shaders

		Started to build sphere geometry, for boulders

	Fixed:
		Solved maximum terrain size bug, can now generate more terrain than ever needed

	Researched:
		Creating sphere geometries



///////////////////////////////////////////////////////////////////////
####################### SCRUM AND SPRINTS BEGIN #######################
///////////////////////////////////////////////////////////////////////


Sprint 0 (13th - 20th February)

	Tackling tasks from product backlog:
		Loading and saving functions (ongoing) 		(time: 03h) (priority: 9)
		Add in rocks (ongoing)				(time: 10h) (priority: 8)
		Create missions for user 			(time: 10h) (priority: 8)
		Build terrain (ongoing) 			(time: 10h) (priority: 6)
		Collision with terrain (ongoing) 		(time: 05h) (priority: 6)			
		Redesign file structures		

		Total estimated hours = 39

	Sprint plan:
		Loading and saving
			HTML5 local storage
			Saving player position, eventually level, XP

		Add in rocks 
			Low poly instanced rendered rocks for non interaction
			Then spheres for interacting with
			Use exising sphere geometry, randomly shift vertices
			Then place them into the world
		
			Added in triangle rocks
			Could spawn them random distance away from the bigger pyramid
			Also have different textures
		
		Create missions for user
			Would involve creating very basic GUI first, see-through,
			Go and explore this section of the map
			Go collect this rock
			Collect X of this rock, to then unlock this rock	
			Print text on screen character by character (left gui?)
				-have a initial sound to incate new mission

			Randomly generate them a mission, depending on their lvl? every few minutes
			-Else, just go explore and mine rocks
			-IF gameTime over 5000, give first mission

		Collision with rocks
			If they're colliding with rock + key held down
				-Show mining progress bar
				-Show particle effects
				-When 100% remove rock, or set its texture to something, depleted
				-Add something to their top left level bar

			They can shoot laser, draw in view direction from infront of them
			If that collides with rock,
			Cap max laser range	

				Particles - make object with constructor! (could have LAVA in craters!)
				Bunch of gl points, move them, if out of bounds reset them
				Define 100 points, put in buffer, 1 draw call?
				Apply some position to them in v shader?

		Build terrain
			Add different levels of perlin noise
			Add in craters

		Collision with terrain
			Add in 2D heightmap rather than 1D array in collision file
			Pop up on GUI, too close to rock etc

	Sprint retrospective:

		Tasks worked on:

			(Broken) Loading and saving functions intial setup (2 hours)
				When loading the players position, when they move, it breaks
				Right now I don't have much information to store, but the code is there

			Added rocks (8 hours)
				Added triangle rocks
				Sphere geometries (NOT MINE)
					USED CODE FROM: https://github.com/mrdoob/three.js/blob/master/src/geometries/SphereGeometry.js
					The used code is in the createRock function of the rock.js file
					Didn't want to try write sphere geometry code from scratch
					But also didn't want to import OBJ of sphere, as would be hard to change vertices
					Most sphere geometeries where completely not connected the back,
					So took ages to find a good sphere

			Added collision with rocks (6 hours)
				
			Added prospecting rocks (30 mins)
				Currently just changes rocks texture to depleted, eventually will gain XP or something

			Redesiging files, now much more object orientated, less globals, private functions (10 hours)
			Added particles (2 hours)
			Added water (2 hours)
			Added inital background screen and GUIs (4 hours)

		Problems:
			Positioning little elements and css'ing them took hours
			Rock collision, annoying to test, had to show triangles at collision boundaries to check
			WHY ARE THERE SO MANY VERTICES FOR THREE.JS SPHERE?
			What happens if the rocks spawn on the player, they're stuck

		Improvements:
			GLdrawElementsInstaced, only needed as performance optimization, not needed right now
			Perhaps save rock positions, or keep them random
			Change water vertices on GPU
			Cut down sphere vertices some how

		Total hours: 46
			30 hours coding
			10 hours more on design how I'm going to do things etc, comments, debugging, updating this logs
			6 hours researching on stackoverflow & youtube 

			

Sprint 1 (20th - 27th February)
	Tackling tasks from product backlog:
		Add in rocks (ongoing)				(time: 05h) (priority: 8) (actual time: 04h)
		Create missions for user 			(time: 05h) (priority: 8) (actual time: 04h)
		Build terrain (ongoing) 			(time: 05h) (priority: 6) (actual time: 05h)
		Build GUIs 					(time: 04h) (priority: 6) (actual time: 05h)
		Texturing terrain 				(time: 05h) (priority: 5) (actual time: 08h)
		Add audio 					(time: 03h) (priority: 4) (actual time: 01h)
		Add in lighting 				(time: 10h) (priority: 4) (actual time: 10h)

	Extra features:
		Fog						(time: 06h) (priority: 4) (actual time: 0.5h)

	Other features:
		Paper UI designs
		Lighting notes
		Started class diagram

		Add fog		

	Sprint plan:
		Create own textures from heightMaps
		Go and find this rock around these coordinates,
			Show image of rock
		Work from existing GUI screenshot
		Dont let user access certain rocks unless high enough level
		Prospecting progress bar
		Geometry shader for lighting, calculating normals
		Add dangerous areas
		Death mechanics, reset all XP and restart, fade out everything, you died
		Add new textures for new rocks
		Water/lava causing death on collision
		Particle effects over lava
		Perhaps 3 more sections of terrain, 4 big big quadrants
		Leveling mechanics, XP bar
			-prospect rock = XP
			-Access new areas based on XP
		Add types of rock
			-types of triangle rock
			-types of regular rock
	
		Add screenshots
		Split myJs files into folders
		Redesign some files,  rename
		Put CSS in another file		
		Remove enableVertexAttribute = calls, its now all done in glSetup
		Enable and disable attributes when rendering, dont enable all global at start

	Sprint retrospective:
		Remove unused jQuery libraries
		Moved buglog into github issues
		Added references file

		Improved water, each vertex now has its own direciton
			Rather than every row having a direction
			Weird spawn makes it look nice when reaches correct height

		Added own perlin noise texture
		Then exported it to image + changed colours, then imported as texture

		Distoriton when rotation a bit better, lowered field of view to 0.3

		Paper UI designs
		Added little txt file as well
		
		Added directional lighting
		Fixed bug with rotating objects
		Added diffuse lighting
		Added specular lighting, avaliable on textures

		Have given 0.5 ambient in shader

		Added proper texture class
		
		Calculated terrain normals + water normals
		Inversed my terrain and water normals, they now point right direction
		My light direction, is going the same way as the normals.... ??
		Yes, because its surfaceToLightVector, so it makes sense that they go same way!
		I think I substracted the vectors the wrong way around

		Inversed X and Z values in get terrain heightMap getters, it now works
		Terrain collision code is now perfect

		Added gaining xp when prospecting a rock	
		
		Added some map design pic + notes	

		Built simple audio class

		Added fog

		Made bunch of perlin textures

		Notes:
			FIX ROTATION NAMES IN RENDER, THEY'RE DIFFERENT FROM
			THOSE GLOBAL NAMES IN MATRICES, xRotation VS rotateX!

			MAKE SURE NORMALS GET BOUND WHEN RENDERING

			Take screenshots of lighting when fixed

			Lighting diagrams + find good references
	
			Whats with the light direction, being the same as the reversedDirection?
			Ok, I think specular is working, because when on the flat section
			of the terrain, there are no highlights whatsoever, because the normals
			are pointing straight up

			Player spawn in middle of 4x4 grid, dangerous areas towards outside
			Different quadrants have different rocks, etc

			4x4 grid minimap!!! shows current quadrant, should be relativley easy
				locked sections, avaliable sections

			Why cant i see specular highlights on water?
				-Its shimmering, because light coming from 1 direction


		
Sprint 2 (27th Feb - 6th March)

	Tackling tasks from product backlog:
		Loading and saving functions (ongoing) 		(time: 03h) (priority: 9) (actual time: 03h)
		FINISH building terrain (ongoing) 		(time: 05h) (priority: 6) (actual time: 10h)
		Build GUIs (Minimap + nearest rock)		(time: 02h) (priority: 6) (actual time: 01h)
		Minimap 					(time: 02h) (priority: 5) (actual time: 06h)

	Other tasks:
		Start test table
		
	Sprint plan:
		Bad minimap 
			4x4 grid minimap, shows current quadrant, 
			should be relativley easy
			locked sections in red, avaliable sections in blue, current in green

		Proper minimap/map
			render the scene from above, in a small portion to the side of window
			Could have really bad efficieny though
			Drawing everything again :/

			Possible solution, only render the minimap/map when the user
			holds down a key, pops up in another interface!
			Users current position gets upped by like +20y
			Then player view gets rotated straight down?
			Set gl.lookAt perhaps
			
		Load and saving
			Player position
			Current XP/Level

		Spawn user in the correct grid square

		Set noise values of 16 quadrants

		Texture all 16 quadrants
			Work on inner 4 squares first
			Have all 16 texturs on 1 atlas, so easy to use!
			Start with mid 4 images
			Move perlin scales in
			Set player spawn

		Add audio
			ambient soundtrack
			when colliding with rocks
			when prospect a rock

		Possibily work on water on GPU and spawning it randomly

		Need a bunch of rocks
		-With names
		-Then have missions telling user to explore the rocks

		If user in range of water vertices, then start updating them, else dont
		
		
	Sprint retrospective:
		MIT Licensing, I've included MIT code, which means I need the license
		But ive changed bits...
		Used MIT licensed library

		Remember to add proper licenses, various MIT from three.js and obj loader
		In licenses file as well

		Rock rendering efficency is bad, seperate draw call for each

		Could have one draw call of small rocks, once terrain + rock rendering efficiency/clipping fixed

		Added Minimap/birds eye view when ser holds M key
			Disables fog, widens zFar when in miniMap mode
			Otherwise, because so far away, everything would be in fog!

			In minimap mode need to widen the zFar plane so player can see alot of the map
			But then decrease back to normal, for rendering efficiney
			The user cant see past 64z anyway due to fog, why render 512z?
			Remade projectionMatrix every frame to set the zFar value

			Added player position onto minimap, just a red square

			Once finished minimap, implement into game, but need to fix rendering issues first
			because will be rendering scene twice

		Changed players x,y,z to private fixed scoping issues
		Removed triangle rocks, they didnt have indices and required different render function	
		Fixed saving player position
		Added rock objs with some textures, lighting is broken with them

		Added flow diagram
		Bit more on class diagram

		I don't commit enough! Do it more!

	Notes:
		Trying to write my own obj loader, waste of time
		Not sure about MIT license, with obj loader and three.js sphere code
		Found terrain rendering was horrible, processes all vertices, discards 95% of them



Sprint 3 (6th - 13th March)

	Tackling tasks from product backlog:

	Other tasks:
		Fix terrain and rock rendering efficiency
		Restructure files
			Add comments
		Change STATIC_DRAW renders to DYNAMIC_DRAW
		Commit more often

	Sprint plan:
		Rock collision (requires terrain rendering fixed)
			If use loads of terrain sections
			Then have rocks in a specific section
			And only test collision for those rocks in that section (not 3x3)
				But be careful of spawning rock on a boundary 

		Some sort of danger mechanic
			
			Warn player of sandstorm, have to get out of area
			Perhaps falling asteroid showers

		Could have a station/building/lander where you have to go:
			refuel, give user fuel bar, goes down when moving
				gui to tell them to go refuel
			deposit ore -> cargo bay full
			fix rover etc
			upgrade rover, faster movespeed etc, fuel tank, rover armour? vs rock
			more powerful drill, can mine new rocks

			When in range of shop, show GUI, press P to open shop

		Gain experience, which is used to unlock new upgrades

		Have some crates (cubes) inside the model, with mapped texture
			DEPOSIT ROCKS
			REFUEL
		
		Special crates could be dropped 'from earth'
		Or asteroid, with bonus xp or something

		Add nearest rock to GUI
		Add effects to GUI when update

		Terrain rendering plan

			Temporary Goal: 
				Process and render the vertices, of the current quadrant the player is in

			Setup:
				Have an array of all VAOs
				Create 16 terrain VAOs, each containing:
					A quadrants vertices, normals, uvs, indices
					Try each quadrant as 128x128 vertices, then possibily 256x256 vertices
			Render:
				Get player position
				Find the quadrant they're in, and get the matching VAO
				Bind and render the data in that VAO

			Actual goal: 
				Split entire map into LOTS of VAOs
				Find current player position, and get matching VAO, and surrouding 8 VAOs (quadrants basically)
				Have to have surrounding vertices as well, so player can see into distance

	Sprint retrospective:
		Stacked noise for terrain generation!
		Added screenshot of regular vs stacked noise

		Fixed weird black lines on terrain, was due to specular parameters,
		but was confused, as I said terrain had 0 reflectivity, and somehow
		giving 10 shineDamper seemed to make it work

		Got Terrain VAO working!

		Fixed terrain rendering issues!
			Added screenshots showing testing

		Added better rock rendering efficiency
		Calculate vector from player to rock, if over some amount
			then the vertices dont get rendered (more importantly dont get processed)

		objRock collision

		Added sector 1, 4x4 squares in middle
			requires > 5 xp to progress

		Rock spawning in certain quadrants

		Added utility class

		Removed horrible sphere code rocks

		Cleaned up texture loader

	Notes:
		Need to stop wasting time with HTML divs for guis



Sprint 4 (13th - 20th March)

Notes: 
	For water spawns, just decrement heightmap values in double for
	Then its easy,

To do:

	Tackling tasks from product backlog:

		Adding player inventory
			When prospect rock, adds to inventory
	
		Remake GUIs
		
	Sprint retrospective:
					
			split css into new file	

			Terrain:
				Expanded map from 1024x1024 to 1536x1536 (64 quadrants to 144)			
				Redid texture atlas
				Added insanely spiky regions on the borders of the map,
					that the rover cant drive on!!
					Means they wont stare into nothing
					Added Map boundaries + gui popup

			Lander:
				Fixed texture
				Added depositing ores at lander
			
			Player:
				Added inventory
				Added rock going into inventory
				Added HP
		
			Game mechanics
				Adding prospect bar

			GUI 
				Swap between GUIs with 1,2,3 keys
	


Sprint 5 (20th - 27th March) - Changed project direction to 'realism' rather than game

	Game aspects where taking ages, weren't technical and didn't them find interesting
	Now behind 1 week worth of progress, stripping out last weeks additions

	Tackling tasks from product backlog:

		Small rocks					(time: 15h) (priority: 8)

		Skybox 						(time: 05h) (priority: 7)
			have sun that acts as directional light 
			small sun, and bunch of stars as well
			then can use fake the lighting on the rocks
			needed for shadows anyway

		Shadows, applied to larger rocks only		(time: 10h) (priority: 7)
	
	Sprint Plan:

		Backup project

		Strip out
			Collision, keep collision with the floor
			GUIs - Could keep MENU GUI and have another GUI, and just show rock information when in range?
			'minimap' and program/shader variables for disabling fog
			inventory
			prospecting
			resources, rock textures etc

		Also remove features from documentation
		Add flyover movement
		Fix terrain textures
		Fix noise sections
		Add new perlin seed each time

		Fix UV bug
			Instead of using 1 texture
			Just use 4, and start UV coordinates from 0 each time.
			Still doesn't work, wasted 3 hours

			Right, generate UV coordinates as if you have 1 section
				-ok will they stretch?
			Then copy from that big 2d array of uv coordinates, into the buffers		

		## Cleanup code ##

		Small rocks plan
			Find LOW poly rocks
			CAN DRAW ALL ROCKS AS INSTANCED :)
			should still split draw calls based on their textures
			assign the rocks a section, easier rendering/processing

			Need to have matrix for each rock as well,
				translation, rotation and scale as well for each rock instance
				Pass in a matrix, rather than just a vec3 position
		
			Rock efficiency for now:

				Need a for loop creating the vaos
					Adding translations buffers etc
				Need to generate rocks for the entire map
				Have rocks per section
					-> 9 draw calls, wont be a problem
					-> because not changing buffer states
				Can use STATIC_DRAW in matrix creation

			Better rock rendering efficiency:

				Can have 9 sections worth of coordinates in one VAO, 
					containing ONE set of verts/nomrals/uvs etc
				Render the 9 sections (requires new indices function)
				So just have 1 draw call, drawing those '9 sections' (3x3 section of 128x128)

				Mutiple rock objs?
				Multiple textures?
				Requires another draw call?

				set texture
				draw
				change texture
				draw from other buffer
				change texture etc
			
		Dust devils plan
			
			Need instanced rendering
			Need update function
				Loops through and updates the matrices
			Just need GL_POINTS
	
			Movement
				Need a simple rotation of a few on the base
				The entire particle system should shift in a motion as well
					How will it move over terrain?
				Simple cone shape

	Sprint Retrospective:

		Didn't manage to finsh finish instance rendering.	

		Monday - 8hr game logic
		Tues - 8hr planning, changing project to Mars Scene, removed game code
		Wed - 10hr instancing
		Thur - 10hr instancing
		Friday- 4hr objs, 1 hr texturing
		Saturday - 4hours, instance rotation
		Sunday - 4hours 'UV' bug fixing, it was a problem with the normals
			I actaully couldnt create the normals properly, as one row
			lost access to the previous row, which it would've calculated
			the normal from.

		Total hours 48. Still need to setup it up next sprint to make up for last week.
	
	

Sprint 6 (27th march - 3rd april) 

	Tackling tasks from product backlog (wont complete water this sprint):

		Skybox						(time: 10h) (priority: 7)
		Water/Lava					(time: 45h) (priority: 6)

	Sprint plan:
		Fix:
		The amount of rocks in different sections
		The scale of rocks, could have double for loop if between 128,128 then scale = 100 etc
			Base the Z scale, on what the X was.
			Like zScale = (rand) + x (as min) 
		The rock texture, all rocks in quadrant need the same texture
			At render time in the renderIndices loop, meshArray.texture
			Might not be awful.
			It holds 60fps!

		Add Skybox

		Add Water, very big task

	Sprint retrospective:
		Fixed amount of rocks
		Fixed rock dimensions

		Added skybox

		Started water
			Now rendering the scene 3 times - dropping to 30FPS
			Could disable rendering rocks on reflection/refraction textures if needed

			Various problems:
				Probably 20 hours staring at, and fixing WebGL errors
				Following water tutorials, then realizing the WebGL spec doesn't even have the features needed

				It broke the skybox... NO idea why
				Difficult with OpenGL ES, lacks some features
				Lacks shader > signs, took a while to work out that
				Lacks built in glClipDistance, wrote own
	
			Included adding reflection and refraction textures
			Currently just rendering them on quads, but eventually on the water quad

		The water is not finished, and wasn't even possible to complete within a sprint, however
		the foundations are there.



Sprint 7 (3rd - 10th April)

	Tackling tasks from product backlog:
		
		Finish water
		
	Other tasks:

		The bigger the rock, the lower it should spawn
		Fix 2d rocks bug

	Sprint retrospective:

		Horrible amounts of time spent debugging and fixing webgl errors, 
		30+ hours fixing bugs.
		The other time was spent adding new content.

		Still couldn't fix the '2d' rocks bug

		Changed skybox
		Finished water, added fesnel effect, specular lighting

	Notes:
		FPS is hit and miss, sometimes 20, sometimes 60.
		I think its because of the rocks and their textures being changed betweeen
		draw calls, it changes the buffer state which is an expensive operation.
		I can also decrease the rock count in each quadrant to improve FPS.

	

Sprint 8 (10th - 17th April)

	Tackling tasks from product backlog:

		Add craters with gas!
		Add particles
		
	Tested:
		RockGenerator
		Terrain
		
	Other tasks:
		
		Add a max height to camera
			Hate how you can fly up and see the world boundaries
			Awkward with higher terrain scale

		Controls menu, GUI
			With invert button
		Wait until textures loaded until run setup
		Load up water strength to shader, otherwise ui cant change it		
		Need perlin seed
		Need Sound
		Fix falling through the floor
		Need Compass/map
			
		Some sort of design
			Class diagram
				Add constructor as well!, methods need parameters?
				Add arrays []
				Add parameters
			Organize main boxes properly

		Helen question, what about javascript class diagrma
			everything is a variable, but having all 'vars' in class diagram is a bit weird
			instead have, vec3, even though it is just a variable?

		Start unit testing
			Test that buffers aren't null and contain values?
			Test that vertices/indices are in correct proportion

		Start the report!
		Use the blackboard template
		Outline main sections and what gonna discuss in each

	Sprint plan:
		
		Gas:
			Need some sort of crater, perhaps reuse old crater code
			Then just have simple particle effects

			Can use one translation matrix for all?
			Therefore don't have to remake matrices, 
			just update with a singular translation matrix

			Update of particles:
			https://processing.org/examples/smokeparticlesystem.html

			Will use gas particle effects for the meteor particle trails

		Asteroids will:
			Spawn in range of the user so they can see it
			Rotate and have particle effects behind them
			On collision will have more particle effects
			Rock will stay on floor afterwards

		Particles will 'eminate?' from the rocks centre position
		Particles will just be a straight line animating

		Asteroid generator class
			randomly wait until generate a new one
			Need a low poly asteroid OBJ

	Sprint retrospective:
		
		Didn't add either asteroids or particles, not enough time
		Realized I need to stop adding time consuming new features!
		Focusing on documentation, testing and adding small bits

	Added:
		-Terrain unit tests
		-Rock generator unit tests
		-Better collision
			-Added max height of 20
		-Update on class diagram
		-Day/night cycle
			-Water loses specular in night
			-Fog colour changes
			-Skybox also rotates
		-User interaction
			-Can change terrain size
			-Can change water strength
		-Slower camera rotation


/*
Sprints sort of went out the window at this point,
It was mainly writing documentation until the end of the project
Not many features where added
*/


Sprint THE END IS NEAR (17th - 1st May)

	Sprint retrospective:
		Mainly documentation and testing
		Report started

	Notes/tasks left to do:

		Copy from the notepad files on techincal information about lighting and water

		Smaller heading titles for subsections like in the testing section

		Change default terrain size to 8

		Water sound doesn't restart when it finishes

		Reference product and indivdual sprint backlogs
			-Separate them into files?
		Add references
		Reference images as well
		Refernece water sound
		reference old perlin noise thing code, that gnnerated the images

		How to format code in report, code samples?
		In the pipeline explanation

		Remove unncessacry resources

		Add vector explanation to scene
	
		Do I need sprint 0-9 design decision diagrams/explanations?

		Explain perlin noise in analysis section, quite lengthy
		or in background reading

		Change numbers on report, like 1.4.4. whatever
		Also change the index at the start to match these

		Make sure U mention the docs in the report!

		How on earth to describe the class diagram?
			Just split into lots of images? or images aren't needed

		RECREATE DOCUMENTATION WHEN CODE DONE

		In analysis section you talk about the main tasks,
		Should this only describe the main tasks at the start of the project?
		Or in this section should it show the project evolving?

		Need to make a user manual
			Link github 
			Say how to build/run the project
			Host the final version on ur dcs.aber.ac.uk
			Say where all documentation is, including the actual docs
			Explain controls how to play
			MAKE A USER MANUAL WITH SCREENSHOTS, CONTROLS, LOADING TIMES ET

		If you remove map boundaries, make sure no collision on out of bounds stuff, let free fly

		Report:

			Are the map boundaries/minimap even worth it? looks awful
			Could remove collision, the collision ui and minimap as well

		To test properly
			Move all files into one folder
			Generate the yuidoc
			Copy the out bit over

			COPY OVER SOURCE FILES EVERY TIME!
			COULD SYMLINK ALL SOURCE FILES AND THE OUT FOLDER TO PROJECT DOCS

		Add yuidoc pages in appendices, but where to mention them