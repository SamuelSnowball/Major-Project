This file contains the current sprint information, 
it will be moved into the product backlog once the sprint has ended.

Sprint 5 (20th - 27th March) - Changed project direction to 'realism' rather than game

	Game aspects where taking ages, weren't technical and didn't them find interesting
	Now behind 1 week worth of progress, stripping out last weeks additions

	Problems:
		Change project title, Mars Scene in WebGL

	Tackling tasks from product backlog:

		Small rocks					(time: 15h) (priority: 8)

		Skybox 						(time: 05h) (priority: 7)
			have sun that acts as directional light 
			small sun, and bunch of stars as well
			then can use fake the lighting on the rocks
			needed for shadows anyway

		Shadows, applied to larger rocks only		(time: 10h) (priority: 7)
	
	Sprint Plan:

		Backup project

		Strip out
			Collision, keep collision with the floor
			GUIs - Could keep MENU GUI and have another GUI, and just show rock information when in range?
			'minimap' and program/shader variables for disabling fog
			inventory
			prospecting
			resources, rock textures etc

		Also remove features from documentation
		Add flyover movement
		Fix terrain textures
		Fix noise sections
		Add new perlin seed each time

		Fix UV bug
			Instead of using 1 texture
			Just use 4, and start UV coordinates from 0 each time.
			Still doesn't work, wasted 3 hours

			Right, generate UV coordinates as if you have 1 section
				-ok will they stretch?
			Then copy from that big 2d array of uv coordinates, into the buffers		

		## Cleanup code ##

		Small rocks plan
			Find LOW poly rocks
			CAN DRAW ALL ROCKS AS INSTANCED :)
			should still split draw calls based on their textures
			assign the rocks a section, easier rendering/processing

		Need a quadrant for the rocks

		Split rock code into different render function
			and then for 'efficiency', calculate the vector to every rock?
			worst case, just make terrainVAO rendering so can take in quadrant / rocks

			store rock stuff in vao? later

			Need to have rotation for each as well, as translation
				and scale as well
			Pass in a matrix, rather than just a vec3 position


	Not using existing mars heightmap
		-literally loading in an obj


	Monday - game logic
	Tues - changed project to Mars Scene, removed game code
	Wed - 10hr instancing
	Thur - 6hr instancing
	Friday- 4hr objs, 1 hr texturing
	Saturday - 2hours, instance rotation

	To do:
	
	Rock efficiency for now:

		Need a for loop creating the vaos
			Adding translations buffers etc

		Need to generate rocks for the entire map
		Have rocks per section
			-> 9 draw calls, wont be a problem
			-> because not changing buffer states?

		Array of rock VAOs (containing the 'mesh' object? 1 mesh per vao?)
			Contains the translations for each quadrant?
			Literally pass the terrainRenderIndices into rock render and
			for(terrainRenderIndices){draw[i]}

		Try without VAO?
		Array of mesh objects, its kinda the same?

		Can use STATIC_DRAW in matrix creation?

	Better rock rendering efficiency:

		Can have 9 sections worth of coordinates in one VAO, 
			containing ONE set of verts/nomrals/uvs etc
		Render the 9 sections (requires new indices function)
		So just have 1 draw call, drawing those '9 sections' (3x3 section of 128x128)


		Mutiple rock objs?
		Multiple textures?
		Requires another draw call?

		set texture
		draw
		change texture
		draw from other buffer
		change texture etc
